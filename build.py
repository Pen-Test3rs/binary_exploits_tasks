#!/usr/bin/env python3
import os
import json
import pathlib
import argparse


def load_flags():
    with open('config.json', 'rt') as f:
        data = json.load(f)
        if 'flags' not in data:
            raise Exception('No flags in config')

        print('Flags config loaded!')
        return data['flags']


def build_if_not_exists(task_path):
    if 'task' not in os.listdir(task_path):
        print(f'Building {task_path}...')
        os.system(f'cd {task_path} && make')


def copy_if_not_exists(task_path, files):
    for file in files:
        file_path = task_path / file
        if not file_path.exists():
            file_to_copy = pathlib.Path('./templates') / file
            print(f'Copying {file} to {task_path}')
            os.system(f'cp {file_to_copy} {task_path}')


def store_flag(task_folder, flag):
    with open(f'{task_folder}/flag.txt', 'w') as file:
        file.write(f'flAGH{{{flag}}}\n')


def prepare_tasks(flags):
    tasks = map(lambda f: (f.name, pathlib.Path(f.path)), filter(lambda f: f.is_dir(), os.scandir('./tasks')))
    for task_name, task_folder in tasks:
        print(task_name)
        flag = flags.get(task_name.split('-')[0], 'default_flag')
        if flag == 'default_flag':
            print(f'{task_name} has not flag set, defaulting to: default_flag')

        store_flag(task_folder, flag)
        copy_if_not_exists(task_folder, ['Dockerfile', 'nsjail.sh'])
        build_if_not_exists(task_folder)

    print('Done!')


def cleanup_mode():
    files_to_remove = ['Dockerfile', 'nsjail.sh', 'flag.txt']
    tasks = map(lambda f: (f.name, f.path), filter(lambda f: f.is_dir(), os.scandir('./tasks')))
    for task_name, task_folder in tasks:
        task_folder = pathlib.Path(task_folder)
        for f in map(lambda x: task_folder / x, files_to_remove):
            if f.exists():
                print(f'Removing {f}')
                f.unlink()


if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='Tasks builder')
    parser.add_argument('--clean', default=False, action='store_true',
                        help='clean up build files from every task folder')

    args = vars(parser.parse_args())
    if args.get('clean'):
        cleanup_mode()
    else:
        prepare_tasks(load_flags())
